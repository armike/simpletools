#!/usr/local/bin/python
import sys, os, time, getpass, subprocess

def ensurePythonEggsDirExists():
    """
    Ensure the python eggs dir exists, in order to make psutil happy.
    """
    eggDir = os.getenv("PYTHON_EGG_CACHE")
    if not eggDir:
        eggDir = os.path.join(os.getenv("HOME"), ".python-eggs")
    if not os.path.exists(eggDir):
        try:
            os.mkdir(eggDir)
            os.chmod(eggDir, 01777)
        except OSError:
            try:
                print (
                    "This tool needs to create the below directory and make it "
                    "world readable and writable. You may be prompted for "
                    "your password below.\n  Creating:  %s" % eggDir
                )
                userName = os.path.split(os.getenv('HOME'))[1]
                sudoCmd = ("/usr/bin/sudo -u %s /bin/mkdir %s; "
                           "/usr/bin/sudo -u %s /bin/chmod 1777 %s;  " 
                           "/usr/bin/sudo -u %s python -c 'import psutil'"%
                           (userName, eggDir, userName, eggDir, userName))
                subprocess.call(sudoCmd, shell=True)
            except:
                raise
                cmd = "  /bin/mkdir %s ; /bin/chmod 1777 %s " % (eggDir, eggDir)
                raise OSError(
                    "This directory needs to exist, but an error occurred "
                    "trying to create it. Try running this without sudo, or "
                    "run the below command to create it, then try rerunning "
                    "%s.\n  %s" % (sys.argv[0], cmd))
        

ensurePythonEggsDirExists()
import psutil

def main():
    """Every 2 seconds, restart alsaloop if necessary."""

    # If the user isn't root, try rerunning this as root and pass the -isroot
    # 
    if getpass.getuser() != "root" and '-isroot' not in sys.argv:
        print ("This tool needs root access in order to restart alsaloop. "
               "You may be prompted for your password below. "
               "If an error occurs, you may not have root access, in which "
               "you will need to talk to Systems to request it.")
        cmd = '/usr/bin/sudo %s' % (' '.join(sys.argv))
        subprocess.call(cmd, shell=True)
        return

    verifyRootness()
    
    print "=== alsaloop killer started ==="
    st = time.time()
    numKills = 0

    while True:
        try:
            if restartIfNeeded():
                numKills += 1
                timeStr = time.strftime('%H:%M:%S', time.gmtime(time.time()-st))
                print " Killed alsaloop %d times in %s" % (numKills, timeStr)
            time.sleep(2)
        except psutil.error.NoSuchProcess:
            pass
            
def restartIfNeeded(threshold=90.0):
    """If alsaloop is taking over threshold cpu, restart it."""
    alsaProc = getAlsaloop()

    # Restart alsaloop if it isn't running.
    # 
    if not alsaProc:
        startAlsaloop()
        return False

    if not (alsaProc and alsaProc.get_cpu_percent() > threshold):
        return False

    print "%s: Killing alsaloop (%d)..." % (time.ctime(), alsaProc.pid)
    alsaProc.kill()

    startAlsaloop()

    return True

def startAlsaloop(tries=60):
    # Try to restart alsaloop for 60 seconds.  It doesn't always work
    # the first few times.
    # 
    for i in xrange(60):
        os.system('/etc/init.d/alsaloop start')
        if getAlsaloop():
            break
        time.sleep(1)
    else:
        print "Couldn't restart alsaloop!"


def getAlsaloop():
    """
    :Returns:
        The alsaloop process or None if it was not found.
    :Rtype:
        `psutil.Process`
    """
    for proc in psutil.process_iter():
        if proc.cmdline and '/usr/bin/alsaloop' == proc.cmdline[0]:
            return proc
    return None

def verifyRootness():
    """
    Raise an error if the user is not root.
    """
    if getpass.getuser() != "root":
        raise ValueError("You are not root!  You need to run with sudo to "
                         "configure alsaloop!")
    
if __name__ == "__main__":
    main()
